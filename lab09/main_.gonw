package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"time"
)

type Btree struct {
	root *Node
}

type Node struct {
	Value       StringVal
	left, right *Node
}

const SLICE_SIZE = 35

func NewTree() *Btree { return new(Btree).Init() }

func (t *Btree) Init() *Btree {
	t.root = nil
	return t
}

func (t *Btree) Insert(value StringVal) *Btree {
	t.root = insert(t.root, value)
	return t
}

func insert(n *Node, value StringVal) *Node {
	if n == nil {
		newVal := StringVal{value.key, nil, 1}
		newVal.words = make([]string, SLICE_SIZE)
		newVal.words[0] = value.words[0]
		return (&Node{Value: newVal}).Init()
		// return (&Node{Value: value}).Init()
	}
	if n.Value.key < value.key {
		n.right = insert(n.right, value)
	} else if n.Value.key > value.key {
		n.left = insert(n.left, value)
	} else {
		// n.Value.words = append(n.Value.words, value.words[0])
		if n.Value.count%SLICE_SIZE == 0 {
			n.Value.count = 0
			// newSlice := make([]string, SLICE_SIZE)
			// n.Value.words = append(n.Value.words, newSlice...)
		}
		n.Value.words[n.Value.count] = value.words[0]
		n.Value.count++

		return n
	}

	return n
}

func (n *Node) Init() *Node {
	n.left = nil
	n.right = nil
	return n
}

func (n *Node) get(key string) *Node {
	var node *Node
	if n.Value.key > key {
		if n.left != nil {
			node = n.left.get(key)
		}
	} else if n.Value.key < key {
		if n.right != nil {
			node = n.right.get(key)
		}
	} else {
		node = n
	}
	return node
}

type StringVal struct {
	key   string
	words []string
	count int
}

func main() {
	ts := time.Now()

	f, err := os.Open("/Users/brisk/vscode/contest/lab09/tests/2")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	in := bufio.NewReader(f)

	// in := bufio.NewReader(os.Stdin)
	n := 0 // dict size
	fmt.Fscan(in, &n)

	tree := NewTree()
	tEnds := NewTree()
	m := make([]string, 1)

	for i := 0; i < n; i++ {
		word := ""
		fmt.Fscan(in, &word)
		l := len(word)
		m[0] = word
		tree.Insert(StringVal{word, m, 1})
		for ml := l; ml > 0; ml-- {
			for i := 1; i <= l-ml; i++ {
				key := word[i : ml+i]
				tree.Insert(StringVal{key, m, 1})
			}
		}
		tEnds.Insert(StringVal{word, m, 1})
		for ml := l - 1; ml > 0; ml-- {
			key := word[ml:l]
			tEnds.Insert(StringVal{key, m, 1})
		}
	}

	s := ""
	q := 0 // req count
	fmt.Fscan(in, &q)
	for i := 0; i < q; i++ {
		if i%50 == 0 {
			fmt.Print(s)
			s = ""
		}
		req := ""
		fmt.Fscan(in, &req)
		br := false

		node := tEnds.root.get(req)
		if node != nil {
			word := node.Value.words
			br = false
			// for _, v := range word {
			for x := 0; x < node.Value.count; x++ {
				v := word[x]
				if v == req {
					continue
				}
				// fmt.Println(v)
				// s += fmt.Sprintln(v)
				s += v + "\n"
				// sl[c] = v
				br = true
				break
			}
		}
		if br {
			continue
		}

		l := len(req)

		maxEqual := 0
		foundWord := ""
		foundSuff := ""

		for ml := l; ml > 0; ml-- {
			key := req[ml:l]

			node := tEnds.root.get(key)
			if node != nil {
				word := node.Value.words
				br = false
				// for _, v := range word {
				for x := 0; x < node.Value.count; x++ {
					v := word[x]
					if v == req {
						continue
					}
					if maxEqual < len(key) {
						maxEqual = len(key)
						foundWord = v
						foundSuff = key
					}
				}
			}
		}
		if foundWord != "" {
			// fmt.Println(foundWord)
			// s += fmt.Sprintln(foundWord)
			s += foundWord + "\n"
			// sl[c] = foundWord

			continue
		}
		_ = foundSuff

		for ml := l - 1; ml > 0; ml-- {
			for i := 0; i <= l-ml; i++ {
				key := req[i : ml+i]

				node := tEnds.root.get(key)
				if node != nil {
					word := node.Value.words
					br = false
					// for _, v := range word {
					for x := 0; x < node.Value.count; x++ {
						v := word[x]
						if v == req {
							continue
						}
						// fmt.Println(v)
						// s += fmt.Sprintln(v)
						s += v + "\n"
						// sl[c] = v

						br = true
						break
					}
				}
				if br {
					break
				}
			}
			if br {
				break
			}
		}
		if br {
			continue
		}

		node = tree.root.get(req)
		if node != nil {
			word := node.Value.words
			br = false
			// for _, v := range word {
			for x := 0; x < node.Value.count; x++ {
				v := word[x]
				if v == req {
					continue
				}
				// fmt.Println(v)
				// s += fmt.Sprintln(v)
				s += v + "\n"
				// sl[c] = v

				br = true
				break
			}
		}
		if br {
			continue
		}

		for ml := l - 1; ml > 0; ml-- {
			for i := 0; i <= l-ml; i++ {
				key := req[i : ml+i]

				node := tree.root.get(key)
				if node != nil {
					word := node.Value.words
					br = false
					// for _, v := range word {
					for x := 0; x < node.Value.count; x++ {
						v := word[x]
						if v == req {
							continue
						}
						// fmt.Println(v)
						// s += fmt.Sprintln(v)
						s += v + "\n"
						// sl[q] = v

						br = true
						break
					}
				}
				if br {
					break
				}
			}
			if br {
				break
			}
		}
	}
	fmt.Print(s)

	te := time.Since(ts)
	fmt.Println(te)
}
